// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: websub.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebSubHub_Subscribe_FullMethodName           = "/websub.WebSubHub/Subscribe"
	WebSubHub_Unsubscribe_FullMethodName         = "/websub.WebSubHub/Unsubscribe"
	WebSubHub_StreamNotifications_FullMethodName = "/websub.WebSubHub/StreamNotifications"
)

// WebSubHubClient is the client API for WebSubHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSubHubClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeRequest, error)
	StreamNotifications(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NotificationRequest, NotificationAck], error)
}

type webSubHubClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSubHubClient(cc grpc.ClientConnInterface) WebSubHubClient {
	return &webSubHubClient{cc}
}

func (c *webSubHubClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, WebSubHub_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSubHubClient) Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeRequest)
	err := c.cc.Invoke(ctx, WebSubHub_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSubHubClient) StreamNotifications(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NotificationRequest, NotificationAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebSubHub_ServiceDesc.Streams[0], WebSubHub_StreamNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotificationRequest, NotificationAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSubHub_StreamNotificationsClient = grpc.BidiStreamingClient[NotificationRequest, NotificationAck]

// WebSubHubServer is the server API for WebSubHub service.
// All implementations must embed UnimplementedWebSubHubServer
// for forward compatibility.
type WebSubHubServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeRequest, error)
	StreamNotifications(grpc.BidiStreamingServer[NotificationRequest, NotificationAck]) error
	mustEmbedUnimplementedWebSubHubServer()
}

// UnimplementedWebSubHubServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebSubHubServer struct{}

func (UnimplementedWebSubHubServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWebSubHubServer) Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedWebSubHubServer) StreamNotifications(grpc.BidiStreamingServer[NotificationRequest, NotificationAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNotifications not implemented")
}
func (UnimplementedWebSubHubServer) mustEmbedUnimplementedWebSubHubServer() {}
func (UnimplementedWebSubHubServer) testEmbeddedByValue()                   {}

// UnsafeWebSubHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSubHubServer will
// result in compilation errors.
type UnsafeWebSubHubServer interface {
	mustEmbedUnimplementedWebSubHubServer()
}

func RegisterWebSubHubServer(s grpc.ServiceRegistrar, srv WebSubHubServer) {
	// If the following call pancis, it indicates UnimplementedWebSubHubServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebSubHub_ServiceDesc, srv)
}

func _WebSubHub_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSubHubServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSubHub_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSubHubServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSubHub_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSubHubServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSubHub_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSubHubServer).Unsubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSubHub_StreamNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebSubHubServer).StreamNotifications(&grpc.GenericServerStream[NotificationRequest, NotificationAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSubHub_StreamNotificationsServer = grpc.BidiStreamingServer[NotificationRequest, NotificationAck]

// WebSubHub_ServiceDesc is the grpc.ServiceDesc for WebSubHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSubHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websub.WebSubHub",
	HandlerType: (*WebSubHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _WebSubHub_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _WebSubHub_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotifications",
			Handler:       _WebSubHub_StreamNotifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "websub.proto",
}
